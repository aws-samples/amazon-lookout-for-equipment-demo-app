Description: >
  [1.0.0] Template to deploy the Amazon Lookout for Equipment demo application

# ============================================================================
# CLOUDFORMATION TEMPLATE PARAMETERS
# These parameters can be adjusted by the user when deploying a stack with
# this template
# ============================================================================
Parameters:
  AdminUsername:
    Type: String
    Description: Creates a username to be used for Authentication.
    AllowedPattern: ^[\p{L}\p{M}\p{S}\p{N}\p{P}]+$
  AdminEmail:
    Type: String
    Description: Email address to be used to send the temporary authentication password.
    AllowedPattern: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
  DataBucket:
    Type: String
    Default: 'lookout-equipment-demo'
    AllowedPattern: '(?!^(\d{1,3}\.){3}\d{1,3}$)(^[a-z0-9]([a-z0-9-]*(\.[a-z0-9])?)*$(?<!\-))'
    ConstraintDescription: Must be a valid Amazon S3 Bucket name
    Description: > 
      S3 bucket which will contains all the resources to run this application. When you launch
      this template deployment, it will add a suffix to this name to make it unique.
  CreateCloudFrontDistribution:
    Description: Creates a CloudFront distribution for accessing the web interface
      of the demo. This must be enabled if S3 Block Public Access is enabled at an
      account level.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'

Conditions:
  WithCloudFront:
    Fn::Equals:
    - Ref: CreateCloudFrontDistribution
    - 'true'

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterLabels:
      DataBucket:
        default: "S3 Bucket"

# ============================================================================
# CLOUDFORMATION TEMPLATE REUSABLE VARIABLES
# ============================================================================
Mappings:
  SourceCode:
    Functions:
      S3Bucket: lookoutforequipmentbucket
      KeyPrefix: l4e-demo-app/v1.0.0/functions
    Layers:
      S3Bucket: lookoutforequipmentbucket
      KeyPrefix: l4e-demo-app/v1.0.0/layers
    StateMachines:
      S3Bucket: lookoutforequipmentbucket
      KeyPrefix: l4e-demo-app/v1.0.0/state-machines
    Frontend:
      S3Bucket: lookoutforequipmentbucket
      KeyPrefix: l4e-demo-app/v1.0.0/frontend

# ============================================================================
Resources:
  # -------------------------
  # Application initial setup
  # -------------------------
  AppSetup:
    Type: Custom::AppSetup
    Properties:
      ServiceToken: !GetAtt AppSetupFunction.Arn

  AppSetupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-setup"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 512
      Timeout: 60
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - l4e-demo-app-setup.zip
      Description: Custom Lambda resource for the Amazon Lookout for Equipment demo app setup
      Role: !GetAtt AppSetupRole.Arn
      Environment:
        Variables:
          API_GATEWAY: API_GATEWAY
          VERSION: 1.0.0
          REGION: !Ref AWS::Region
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
          COGNITO_IDENTITY_POOL_ID: !Ref CognitoIdentityPool
          CREATE_CLOUDFRONT_DISTRIBUTION: !Ref CreateCloudFrontDistribution
          TO_BUCKET: !Ref FrontendBucket
          USER_FILES_BUCKET: !Ref ApplicationBucket
          SFN_MODEL_DEPLOYMENT_ARN: "arn:aws:states:..."
          STACK_ID: !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          FROM_BUCKET: !Join 
            - '-'
            - - !FindInMap 
                - SourceCode
                - Functions
                - S3Bucket
              - !Ref 'AWS::Region'
          FROM_PREFIX: !Join 
            - /
            - - !FindInMap 
                - SourceCode
                - Frontend
                - KeyPrefix
              - l4e-demo-app-frontend.zip
    DependsOn:
      - AppSetupRole
      - FrontendBucket
      - ApplicationBucket
      - CognitoUserPool

  AppSetupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: L4EDemo-setup-S3-fc
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:DeleteObject
            - s3:ListBucket
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
            - !GetAtt FrontendBucket.Arn
            - !Sub ${FrontendBucket.Arn}/*
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::lookoutforequipmentbucket-eu-west-1/*
      - PolicyName: L4EDemo-cloudwatch-logs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Resource: '*'
            Effect: Allow
            Action: logs:CreateLogGroup
          - Resource:
             !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
            Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents

  # ----------
  # S3 BUCKETS
  # ----------
  ApplicationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - !Ref DataBucket
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - HEAD
          - PUT
          - POST
          - DELETE
          AllowedOrigins:
          - '*'
          ExposedHeaders:
          - x-amz-server-side-encryption
          - x-amz-request-id
          - x-amz-id-2
          - ETag
          Id: !Join
            - "-"
            - - L4EUserBucketCorsRule
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
            # Fn::Sub: ${ResourcePrefix}-L4EUserBucketCorsRule
          MaxAge: 3600

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          AllowedOrigins:
          - '*'
          Id: !Join
            - "-"
            - - L4ECorsRule
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
            # Fn::Sub: ${ResourcePrefix}-L4ECorsRule
          MaxAge: 3600

  FrontendBucketReadPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: WithCloudFront
    Properties:
      Bucket:
        Ref: FrontendBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:s3:::${FrontendBucket}/*
          Principal:
            CanonicalUser:
              Fn::GetAtt:
              - CloudFrontOriginAccessIdentity
              - S3CanonicalUserId

  # ------------------------
  # CloudFront configuration
  # ------------------------
  CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Condition: WithCloudFront
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Ref FrontendBucket

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: WithCloudFront
    Properties:
      DistributionConfig:
        Origins:
        - DomainName:
            Fn::GetAtt:
            - FrontendBucket
            - RegionalDomainName
          Id: !Join
            - "-"
            - - myS3Origin
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
            # Fn::Sub: ${ResourcePrefix}-myS3Origin
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        HttpVersion: http2
        Comment: The distribution for the Lookout for Equipment Demo
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - HEAD
          - GET
          - OPTIONS
          TargetOriginId: !Join
            - "-"
            - - myS3Origin
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
            # Fn::Sub: ${ResourcePrefix}-myS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
            Headers:
            - Authorization
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # ------------------------------------
  # Cognito authentication configuration
  # ------------------------------------
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join
        - "-"
        - - "l4e-demo-app-user-pool"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      AdminCreateUserConfig:
        InviteMessageTemplate:
          EmailMessage: Hi!<br /><br />Your Amazon Lookout for Equipment Demo username is <b>{username}</b>
            and the temporary password is <b>{####}</b>. You will have to change it when you log in for the
            first time.<br /><br />Thanks for testing out our app, we're looking forward to your feedbacks.
            <br /><br />The AWS Lookout for Equipment team.
          EmailSubject: Amazon Lookout for Equipment Demo - Your temporary password
          SMSMessage: Your Lookout for Equipment Demo username is {username} and 
            the temporary password is "{####}".
      AutoVerifiedAttributes:
      - email
      UsernameConfiguration:
        CaseSensitive: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Join
        - "-"
        - - "l4e-demo-app-user-pool-client"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      GenerateSecret: false
      RefreshTokenValidity: 1
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows: 
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_SRP_AUTH
    DependsOn:
      CognitoUserPool

  CognitoUserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: !Ref AdminUsername
      UserPoolId: !Ref CognitoUserPool
      DesiredDeliveryMediums:
      - EMAIL
      UserAttributes:
      - Name: email
        Value: !Ref AdminEmail
      - Name: email_verified
        Value: 'true'

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Join
        - "-"
        - - "l4e-demo-app-identity-pool"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      CognitoIdentityProviders:
      - ClientId:
          Ref: CognitoUserPoolClient
        ProviderName: !GetAtt CognitoUserPool.ProviderName
      AllowUnauthenticatedIdentities: false

  CognitoIdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn
        # unauthenticated: !GetAtt L4EDemoAppUnauthenticatedRole.Arn

  # ---------------
  # DynamoDB Tables
  # ---------------
  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join
        - "-"
        - - "l4edemoapp-projects"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      AttributeDefinitions:
      - AttributeName: project
        AttributeType: S
      - AttributeName: user_id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: false
      KeySchema:
      - AttributeName: user_id
        KeyType: HASH
      - AttributeName: project
        KeyType: RANGE
      TableClass: STANDARD

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join
        - "-"
        - - "l4edemoapp-users"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      AttributeDefinitions:
      - AttributeName: user_id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: false
      KeySchema:
      - AttributeName: user_id
        KeyType: HASH
      TableClass: STANDARD

  # -----------------
  # EventBridge rules
  # -----------------
  # ProjectCreateRule:
  #   Type: AWS::Events::Rule
  #   Properties: 
  #     Name: !Join
  #       - "-"
  #       - - "L4EDemoApp-DatasetPreparationTrigger"
  #         - !Select
  #           - 0
  #           - !Split
  #             - "-"
  #             - !Select
  #               - 2
  #               - !Split
  #                 - "/"
  #                 - !Ref "AWS::StackId"
  #     Description: Triggered when a new CSV file is uploaded
  #     EventPattern: !Sub '{"source":["aws.s3"],"detail-type":["Object Created"],"detail":{"bucket":{"name":["${ApplicationBucket.BucketName}"]},"object":{"key":[{"prefix":"private/"}]}}}'
  #     State: ENABLED
  #     Targets: 
  #     - Arn: arn:aws:states:eu-west-1:905637044774:stateMachine:l4e-demo-app-datasets-preparation
  #       Id: Id66313644-cede-4f6a-9dc8-21591f088ae6
  #       RoleArn: arn:aws:iam::905637044774:role/service-role/Amazon_EventBridge_Invoke_Step_Functions_336626532

  # ----------------
  # Lambda functions
  # ----------------
  FunctionNewProjectEntry:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-new-project-entry"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Create a new project entry when user uploads a new dataset
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - l4e-demo-app-new-project-entry.zip
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaNewEntryRole.Arn
      Runtime: python3.10
      MemorySize: 2048
      Timeout: 60
      EphemeralStorage: 
        Size: 5120
      Layers:
        - !Ref PackagePandas
    DependsOn:
      - LambdaNewEntryRole
      - PackagePandas

  FunctionPrepareHourlyData:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-prepare-hourly-data"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Prepare the hourly data and ingest it into DynamoDB
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - l4e-demo-app-prepare-hourly-data.zip
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaNewEntryRole.Arn
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 300
      EphemeralStorage: 
        Size: 5120
      Layers:
        - !Ref PackagePandas
    DependsOn:
      - LambdaNewEntryRole
      - PackagePandas

  # -------------------------
  # LAMBDA LAYERS DEFINITIONS
  # -------------------------
  PackagePandas:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: 'pandas-py310'
      Content:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Layers
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - Layers
              - KeyPrefix
            - pandas-py310.zip
      CompatibleRuntimes:
        - python3.10

  # --------------------------
  # Step functions definitions
  # --------------------------
  DatasetPreparationStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join
        - "-"
        - - "l4e-demo-app-datasets-preparation"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      DefinitionS3Location:
        Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - OtherResources
              - S3Bucket
            - !Ref 'AWS::Region'
        Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - OtherResources
              - KeyPrefix
            - 'datasets-preparation.json'
      DefinitionSubstitutions:
    #     Lambda functions:
    #     l4e-demo-app-new-project-entry
    #     l4e-demo-app-prepare-hourly-data

    #     IAM Role for the data ingestion in L4E:
    #     arn:aws:iam::905637044774:role/service-role/StepFunctions-l4e-demo-app-datasets-preparation-role-693f12e4

        function-new-project-entry: !GetAtt   FunctionNewProjectEntry.Arn
        function-prepare-hourly-data: !GetAtt FunctionPrepareHourlyData.Arn
    #     function-ingest-data: !GetAtt FunctionIngestData.Arn
    #     function-wait-for-ingestion: !GetAtt FunctionWaitForIngestion.Arn
    #     function-train-model: !GetAtt FunctionTrainModel.Arn
    #     function-wait-for-training: !GetAtt FunctionWaitForTraining.Arn
    #     function-create_scheduler: !GetAtt FunctionCreateScheduler.Arn
    #   RoleArn: !GetAtt LookoutEquipmentAutomationStepFunctionsRole.Arn
    #   LoggingConfiguration:
    #     Destinations: 
    #       - CloudWatchLogsLogGroup:
    #           LogGroupArn: !GetAtt LookoutAutomationStateMachineLogGroup.Arn
    #     IncludeExecutionData: True
    #     Level: ALL
    DependsOn:
    #   - LookoutEquipmentAutomationStepFunctionsRole
      - FunctionNewProjectEntry
      - FunctionPrepareHourlyData
    #   - FunctionIngestData
    #   - FunctionWaitForIngestion
    #   - FunctionTrainModel
    #   - FunctionWaitForTraining
    #   - FunctionCreateScheduler
    #   - LookoutAutomationStateMachineLogGroup

  # ---------
  # IAM Roles
  # ---------
  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRoleWithWebIdentity
          Condition:
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
            StringEquals:
              cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
      ########################################################
      # TO DO: REMOVE THIS BROAD MANAGED POLICIES            #
      # Replace by least privileged necessary to use the app #
      ########################################################
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonLookoutEquipmentFullAccess'
      Policies:
      - PolicyName: !Join
        - "_"
        - - Private_policy
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:PutObjectTagging
            Effect: Allow
            Resource: !Join
            - "/"
            - - !GetAtt ApplicationBucket.Arn
              - "private/${cognito-identity.amazonaws.com:sub}/*"
      - PolicyName: !Join
        - "_"
        - - Protected_policy
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            Effect: Allow
            Resource: !Join
            - "/"
            - - !GetAtt ApplicationBucket.Arn
              - "protected/${cognito-identity.amazonaws.com:sub}/*"
      - PolicyName: !Join
        - "_"
        - - Public_policy
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            Effect: Allow
            Resource: !Join
            - "/"
            - - !GetAtt ApplicationBucket.Arn
              - "public/*"
      - PolicyName: !Join
        - "_"
        - - read_policy
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Join
            - "/"
            - - !GetAtt ApplicationBucket.Arn
              - "protected/*"
          - Action: s3:ListBucket
            Condition:
              StringLike:
                s3:prefix:
                - public/
                - public/*
                - protected/
                - protected/*
                - private/${cognito-identity.amazonaws.com:sub}/
                - private/${cognito-identity.amazonaws.com:sub}/*
            Effect: Allow
            Resource: !GetAtt ApplicationBucket.Arn
      - PolicyName: !Join
        - "_"
        - - Uploads_policy
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - s3:PutObject
            Effect: Allow
            Resource: !Join
            - "/"
            - - !GetAtt ApplicationBucket.Arn
              - "uploads/*"

  LambdaNewEntryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
      Policies:
        - PolicyName: LambdaFunctionServiceRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':*'
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'

    

# ================
# Outputs
# ================
Outputs:
  ApplicationUrl:
    Value:
      Fn::If:
      - WithCloudFront
      - Fn::Sub: https://${CloudFrontDistribution.DomainName}
      - Fn::Sub: https://${FrontendBucket.RegionalDomainName}/index.html
    Description: URL for the Amazon Lookout for Equipment Demo app


