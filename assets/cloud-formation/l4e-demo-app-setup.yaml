Description: >
  [1.1.0] Template to deploy the Amazon Lookout for Equipment demo application

# ============================================================================
# CLOUDFORMATION TEMPLATE PARAMETERS
# These parameters can be adjusted by the user when deploying a stack with
# this template
# ============================================================================
Parameters:
  AdminUsername:
    Type: String
    Description: Creates a username to be used for authentication by the admin user
    AllowedPattern: ^[\p{L}\p{M}\p{S}\p{N}\p{P}]+$
  AdminEmail:
    Type: String
    Description: Email address to be used to send the temporary authentication password for the admin user
    AllowedPattern: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
  DataBucket:
    Type: String
    Default: 'lookout-equipment-app'
    AllowedPattern: '(?!^(\d{1,3}\.){3}\d{1,3}$)(^[a-z0-9]([a-z0-9-]*(\.[a-z0-9])?)*$(?<!\-))'
    ConstraintDescription: Must be a valid Amazon S3 Bucket name
    Description: > 
      S3 bucket which will contains all the resources to run this application. When you launch
      this template deployment, it will add a suffix to this name to make it unique.
  CreateCloudFrontDistribution:
    Description: Creates a CloudFront distribution for accessing the web interface
      of the app. This must be enabled if S3 Block Public Access is enabled at an
      account level.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  AllowUserSignUp:
    Description: >
      Allows new user sign-up on the app authentication screen? If set to "false", refer to the installation
      page on GitHub to learn how to create users manually in the Cognito user pool that will be created
      for this application (https://github.com/aws-samples/amazon-lookout-for-equipment-demo-app/blob/main/USAGE.md#how-to-manually-create-user).
    Type: String
    Default: 'false'
    AllowedValues:
    - 'true'
    - 'false'

Conditions:
  WithCloudFront:
    !Equals [!Ref CreateCloudFrontDistribution, 'true']

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Parameters:
          - AdminUsername
          - AdminEmail
          - AllowUserSignUp
          - DataBucket
          - CreateCloudFrontDistribution
    ParameterLabels:
      AdminUsername:
        default: "Admin username"
      AdminEmail:
        default: "Admin email"
      DataBucket:
        default: "S3 Bucket"
      CreateCloudFrontDistribution:
        default: "Create CloudFront distribution"
      AllowUserSignUp:
        default: "Allow new users to sign up in the app"

# ============================================================================
# CLOUDFORMATION TEMPLATE REUSABLE VARIABLES
# ============================================================================
Mappings:
  SourceCode:
    Functions:
      S3Bucket: lookout-equipment-content
      KeyPrefix: l4e-demo-app/v1.1.0/functions
      AppSetupVersion: 7
    Layers:
      S3Bucket: lookout-equipment-content
      KeyPrefix: l4e-demo-app/v1.1.0/layers
    StateMachines:
      S3Bucket: lookout-equipment-content
      KeyPrefix: l4e-demo-app/v1.1.0/state-machines
    Frontend:
      S3Bucket: lookout-equipment-content
      KeyPrefix: l4e-demo-app/v1.1.0/frontend

# ============================================================================
Resources:
  # -------------------------
  # APPLICATION INITIAL SETUP
  # -------------------------
  AppSetup:
    Type: Custom::AppSetup
    Properties:
      ServiceToken: !GetAtt AppSetupFunction.Arn
      AppSetupVersion: !FindInMap 
        - SourceCode
        - Functions
        - AppSetupVersion

  AppSetupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-setup"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 512
      Timeout: 60
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-setup-v7.zip
      Description: Amazon Lookout for Equipment demo app setup
      Role: !GetAtt AppSetupRole.Arn
      Environment:
        Variables:
          API_GATEWAY: API_GATEWAY
          VERSION: 1.1.0
          REGION: !Ref AWS::Region
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
          COGNITO_IDENTITY_POOL_ID: !Ref CognitoIdentityPool
          CREATE_CLOUDFRONT_DISTRIBUTION: !Ref CreateCloudFrontDistribution
          TO_BUCKET: !Ref FrontendBucket
          USER_FILES_BUCKET: !Ref ApplicationBucket
          SFN_MODEL_DEPLOYMENT_ARN: !GetAtt DeployModelStateMachine.Arn
          SFN_MODEL_RESULTS_EXTRACTION_ARN: !GetAtt ModelResultsExtractionStateMachine.Arn
          SFN_DATASET_PREPARATION: !GetAtt DatasetPreparationStateMachine.Arn
          SFN_TIMESTREAM_EXPORT: !GetAtt TimestreamExportStateMachine.Arn
          ALLOW_USER_SIGN_UP: !Ref AllowUserSignUp
          API_GATEWAY_ID: !Ref AppBackendApiGateway
          STACK_ID: !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          FROM_BUCKET: !Join 
            - '-'
            - - !FindInMap 
                - SourceCode
                - Functions
                - S3Bucket
              - !Ref 'AWS::Region'
          FROM_PREFIX: !Join 
            - /
            - - !FindInMap 
                - SourceCode
                - Frontend
                - KeyPrefix
              - l4e-demo-app-frontend.zip
    DependsOn:
      - AppSetupRole
      - FrontendBucket
      - ApplicationBucket
      - CognitoUserPool

  AppSetupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: L4EDemo-setup-S3-fc
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:DeleteObject
            - s3:ListBucket
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
            - !GetAtt FrontendBucket.Arn
            - !Sub ${FrontendBucket.Arn}/*
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':s3:::'
                - !FindInMap 
                  - SourceCode
                  - Frontend
                  - S3Bucket
                - '-'
                - !Ref 'AWS::Region'
                - '/*'
      - PolicyName: L4EDemo-cloudwatch-logs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Resource: '*'
            Effect: Allow
            Action: logs:CreateLogGroup
          - Resource:
             !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
            Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents

  # ----------
  # S3 BUCKETS
  # ----------

  # The bucket that will receive user datasets, inference results, etc. If this
  # CloudFormation stack is deleted, this user buckets will be retained as it
  # will contain all the inference data generated by deployed models:
  ApplicationBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      BucketName: !Join
        - "-"
        - - !Ref DataBucket
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - HEAD
          - PUT
          - POST
          - DELETE
          AllowedOrigins:
          - '*'
          ExposedHeaders:
          - x-amz-server-side-encryption
          - x-amz-request-id
          - x-amz-id-2
          - ETag
          Id: !Join
            - "-"
            - - L4EUserBucketCorsRule
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          MaxAge: 3600

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - !Ref DataBucket
          - 'frontend'
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          AllowedOrigins:
          - '*'
          Id: !Join
            - "-"
            - - L4ECorsRule
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          MaxAge: 3600

  FrontendBucketReadPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: WithCloudFront
    Properties:
      Bucket:
        Ref: FrontendBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Resource:
            !Sub arn:${AWS::Partition}:s3:::${FrontendBucket}/*
          Principal:
            CanonicalUser:
              !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  # ----------------------------------------------------------------------------
  # APPLICATION BUCKET INITIALIZATION
  # The initial S3 bucket must be initialized with a few directories to allow
  # the trigger definition. This custom CloudFormation resource is ran before the
  # bucket is configured:
  # ----------------------------------------------------------------------------
  InitializeApplicationBucketFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-initialize-data-bucket"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Initialize bucket content and enable event notification
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os

          def lambda_handler(event, context):
              print(event)
              
              s3 = boto3.client('s3')
              s3_resource = boto3.resource('s3')
              bucket = event['ResourceProperties']['DataBucket']
              region = event['ResourceProperties']['DataBucketRegion']
              lambda_arn = event['ResourceProperties']['LambdaArn']
              
              try:
                  # Stack creation request detected:
                  if event['RequestType'] == 'Create':
                      # Create the folders:
                      s3.put_object(Bucket=bucket, Key=('inference-data/'))
                      s3.put_object(Bucket=bucket, Key=('inference-data/input/'))
                      s3.put_object(Bucket=bucket, Key=('inference-data/output/'))
                      s3.put_object(Bucket=bucket, Key=('raw-datasets/'))
                      
                      bucket_notification = s3_resource.BucketNotification(bucket)
                      notification_response = bucket_notification.put(
                        NotificationConfiguration={
                          'LambdaFunctionConfigurations': [{
                            'LambdaFunctionArn': lambda_arn,
                            'Events': ['s3:ObjectCreated:*'],
                            'Filter': {
                              'Key': {
                                'FilterRules': [
                                  {'Name': 'prefix', 'Value': 'inference-data/'},
                                  {'Name': 'suffix', 'Value': '.jsonl'},
                                ]
                              }
                            }
                          }],
                          'EventBridgeConfiguration': {}
                        }
                      )
                      
                  responseData = {'BucketName': bucket}
                  responseStatus = 'SUCCESS'
                  
              except Exception as e:
                  print('Failed to process the request:', e)
                  responseStatus = 'FAILED'
                  responseData = {'Failure': str(e)}
              
              print(event, context, responseStatus, responseData)    
              cfnresponse.send(event, context, responseStatus, responseData)
      Handler: index.lambda_handler
      Role: !GetAtt InitializeBucketRole.Arn
      Runtime: python3.10
      MemorySize: 128
      Timeout: 5
    DependsOn:
      - InitializeBucketRole

  # This custom resource runs the previous lambda function to populate
  # the S3 bucket and position the asset configuration trigger:
  InitializeApplicationBucket:
    Type: Custom::InitializeApplicationBucketFunction
    Properties:
      ServiceToken: !GetAtt InitializeApplicationBucketFunction.Arn
      DataBucket: !Ref ApplicationBucket
      DataBucketRegion: !Ref 'AWS::Region'
      LambdaArn: !GetAtt FunctionStoreInferenceResults.Arn
    DependsOn:
      - InferenceTriggerS3Permission
      - ApplicationBucket
      - FunctionStoreInferenceResults

  # Allows the Application S3 bucket to trigger the inference results
  # storage Lambda function when a new JSONL file is loaded in the
  # `inference-data/input` prefix location:
  InferenceTriggerS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FunctionStoreInferenceResults.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt ApplicationBucket.Arn
    DependsOn:
      - FunctionStoreInferenceResults
      - ApplicationBucket

  # ----------------------------------------------------------------------------
  # DYNAMODB TABLES INITIALIZATION
  # The initial DynamoDB users table will be initialized with the admin user.
  # When a stack deletion is triggered, all the tables associated with this app
  # will also be removed to reduce incurred costs
  # ----------------------------------------------------------------------------
  InitializeDynamoDBTablesFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-initialize-ddb-tables"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Initialize and clean-up DynamoDB tables
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os

          cognito_client = boto3.client('cognito-idp')
          ddb_client = boto3.client('dynamodb')

          def lambda_handler(event, context):
              print(event)
              print('------------------------------')
              
              user_table_name = event['ResourceProperties']['UserTableName']
              stack_id = event['ResourceProperties']['StackId']
              user_pool_id = event['ResourceProperties']['CognitoUserPoolId']
              user_name = event['ResourceProperties']['AdminUserName']

              try:
                  # --------------------------------
                  # Stack creation request detected:
                  # --------------------------------
                  if event['RequestType'] == 'Create':
                    # Get user infos from the Cognito Identity Pool:
                    response = cognito_client.admin_get_user(
                        UserPoolId=user_pool_id,
                        Username=user_name
                    )
                    
                    attributes = {}
                    response = response['UserAttributes']
                    for attr in response:
                        attributes[attr['Name']] = attr['Value']
                        
                    admin_email = {'email': {'S': attributes['email']}}
                    admin_uid = attributes['sub'].split('-')[0]
                    
                    user_item = {}
                    user_item['user_id'] = {'S': attributes['sub'].split('-')[0]}
                    user_item['show_help'] = {'BOOL': True}
                    user_item['is_admin'] = {'BOOL': True}
                    user_item['email'] = {'S': attributes['email']}
                    
                    # Creates this first user in DynamoDB:
                    ddb_client.put_item(TableName=user_table_name, Item=user_item)

                  # ------------------------------
                  # Stack delete request detected:
                  # ------------------------------
                  elif event['RequestType'] == 'Delete':
                    # Get all tables:
                    list_tables = list_all_tables()
                    response = ddb_client.scan(TableName=user_table_name)

                    # We loop through all the users to delete the
                    # tables associated to each of them:
                    if (len(response['Items']) > 0):
                        for item in response['Items']:
                            user_id = item['user_id']['S']
                            if user_id in list_tables.keys():
                                delete_user_tables(list_tables[user_id])

                  responseData = {'UserName': user_name}
                  responseStatus = 'SUCCESS'
                  
              except Exception as e:
                  print('Failed to process the request:', e)
                  responseStatus = 'FAILED'
                  responseData = {'Failure': str(e)}
              
              print(event, context, responseStatus, responseData)    
              cfnresponse.send(event, context, responseStatus, responseData)

          def list_all_tables():
            response = None
            lastEvaluatedKey = None
            
            response = ddb_client.list_tables()
            list_tables = response['TableNames']
            
            while ('LastEvaluatedTableName' in response.keys()):
                response = ddb_client.list_tables(
                    ExclusiveStartTableName=response['LastEvaluatedTableName']
                )
                
                list_tables += response['TableNames']
                
            user_tables = {}
            for table_name in list_tables:
                table_owner = table_name.split('-')[1]
                if table_owner not in user_tables.keys():
                    user_tables[table_owner] = []
                user_tables[table_owner].append(table_name)
            
            return user_tables
            
          def delete_user_tables(list_tables):
            for table in list_tables:
                print(f'Deleting user table: {table}...')
                ddb_client.delete_table(TableName=table)
      Handler: index.lambda_handler
      Role: !GetAtt InitializeDynamoDBTablesRole.Arn
      Runtime: python3.10
      MemorySize: 128
      Timeout: 5
    DependsOn:
      - InitializeDynamoDBTablesRole

  # This custom resource runs the previous lambda function to either
  # initialize or delete the DynamoDB tables linked to this app:
  InitializeDynamoDBTables:
    Type: Custom::InitializeDynamoDBTablesFunction
    Properties:
      ServiceToken: !GetAtt InitializeDynamoDBTablesFunction.Arn
      UserTableName: !Ref UsersTable
      AdminUserName: !Ref AdminUsername
      CognitoUserPoolId: !Ref CognitoUserPool
      StackId: !Select
        - 0
        - !Split
          - "-"
          - !Select
            - 2
            - !Split
              - "/"
              - !Ref "AWS::StackId"
    DependsOn:
      - UsersTable
      - CognitoUserPool
      - InitializeDynamoDBTablesRole
      - InitializeDynamoDBTablesFunction

  # ------------------------
  # CLOUDFRONT CONFIGURATION
  # ------------------------
  CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Condition: WithCloudFront
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Ref FrontendBucket

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: WithCloudFront
    Properties:
      DistributionConfig:
        Origins:
        - DomainName:
            !GetAtt FrontendBucket.RegionalDomainName
          Id: !Join
            - "-"
            - - myS3Origin
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          S3OriginConfig:
            OriginAccessIdentity:
              !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        HttpVersion: http2
        Comment: The distribution for the Lookout for Equipment Demo
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - HEAD
          - GET
          - OPTIONS
          TargetOriginId: !Join
            - "-"
            - - myS3Origin
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
            Headers:
            - Authorization
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # ------------------------------------
  # COGNITO AUTHENTICATION CONFIGURATION
  # ------------------------------------
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join
        - "-"
        - - "l4e-demo-app-user-pool"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      AdminCreateUserConfig:
        InviteMessageTemplate:
          EmailMessage: Hi!<br /><br />Your Amazon Lookout for Equipment Demo username is <b>{username}</b>
            and the temporary password is <b>{####}</b>. You will have to change it when you log in for the
            first time.<br /><br />Thank you for testing out our app, we're looking forward to your feedbacks!
            <br /><br />The Amazon Lookout for Equipment team.
          EmailSubject: Amazon Lookout for Equipment Demo - Your temporary password
          SMSMessage: Your Lookout for Equipment Demo username is {username} and 
            the temporary password is "{####}".
      AutoVerifiedAttributes:
      - email
      UsernameConfiguration:
        CaseSensitive: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Join
        - "-"
        - - "l4e-demo-app-user-pool-client"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      GenerateSecret: false
      RefreshTokenValidity: 1
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows: 
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_SRP_AUTH
    DependsOn:
      CognitoUserPool

  CognitoUserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: !Ref AdminUsername
      UserPoolId: !Ref CognitoUserPool
      DesiredDeliveryMediums:
      - EMAIL
      UserAttributes:
      - Name: email
        Value: !Ref AdminEmail
      - Name: email_verified
        Value: 'true'

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Join
        - "-"
        - - "l4e-demo-app-identity-pool"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      CognitoIdentityProviders:
      - ClientId:
          Ref: CognitoUserPoolClient
        ProviderName: !GetAtt CognitoUserPool.ProviderName
      AllowUnauthenticatedIdentities: false

  CognitoIdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn
        # unauthenticated: !GetAtt L4EDemoAppUnauthenticatedRole.Arn

  # ---------------
  # DYNAMODB TABLES
  # ---------------
  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join
        - "-"
        - - "l4edemoapp-projects"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      AttributeDefinitions:
      - AttributeName: project
        AttributeType: S
      - AttributeName: user_id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: false
      KeySchema:
      - AttributeName: user_id
        KeyType: HASH
      - AttributeName: project
        KeyType: RANGE
      TableClass: STANDARD

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join
        - "-"
        - - "l4edemoapp-users"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      AttributeDefinitions:
      - AttributeName: user_id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: false
      KeySchema:
      - AttributeName: user_id
        KeyType: HASH
      TableClass: STANDARD

  # ----------------
  # LAMBDA FUNCTIONS
  # ----------------
  FunctionNewProjectEntry:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-new-project-entry"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Create a new project entry when user uploads a new dataset
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-new-project-entry-v2.zip
      Environment:
        Variables:
          STACK_ID: !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionNewProjectEntryRole.Arn
      Runtime: python3.10
      MemorySize: 2048
      Timeout: 60
      EphemeralStorage: 
        Size: 5120
      Layers:
        - !Ref PackagePandas
    DependsOn:
      - FunctionNewProjectEntryRole
      - LambdaExecutionPolicy
      - S3AccessPolicy
      - DynamoDBAccessPolicy
      - PackagePandas

  FunctionPrepareHourlyData:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-prepare-hourly-data"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Prepare the hourly data and ingest it into DynamoDB
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-prepare-hourly-data-v5.zip
      Environment:
        Variables:
          STACK_ID: !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionPrepareHourlyDataRole.Arn
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 300
      EphemeralStorage: 
        Size: 5120
      Layers:
        - !Ref PackagePandas
    DependsOn:
      - FunctionPrepareHourlyDataRole
      - PackagePandas

  FunctionIngestModelResults:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-ingest-model-results"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Ingest the results from a trained model
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-ingest-model-results-v2.zip
      Environment:
        Variables:
          STACK_ID: !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionIngestModelResultsRole.Arn
      Runtime: python3.10
      MemorySize: 1024
      Timeout: 600
      Layers:
        - !Ref PackagePandas
    DependsOn:
      - FunctionIngestModelResultsRole
      - PackagePandas

  FunctionPrepareReplayData:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-prepare-replay-data"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Generate synthetic data from the historical dataset
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-prepare-replay-data-v5.zip
      Environment:
        Variables:
          STACK_ID: !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionPrepareReplayDataRole.Arn
      Runtime: python3.10
      MemorySize: 1024
      Timeout: 180
      Layers:
        - !Ref PackagePandas
    DependsOn:
      - FunctionPrepareReplayDataRole
      - PackagePandas

  FunctionTrainingResultsExtraction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-training-results-extraction"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Extracts and store the training results
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-training-results-extraction-v2.zip
      Environment:
        Variables:
          BUCKET: !Ref ApplicationBucket
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionTrainingResultsExtractionRole.Arn
      Runtime: python3.10
      MemorySize: 1024
      Timeout: 30
      Layers:
        - !Ref PackagePandas
    DependsOn:
      - FunctionTrainingResultsExtractionRole
      - PackagePandas

  FunctionStoreInferenceInput:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-store-inference-inputs"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Stores the input data used for the last inference call
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-store-inference-inputs-v2.zip
      Environment:
        Variables:
          STACK_ID: !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionStoreInferenceInputRole.Arn
      Runtime: python3.10
      MemorySize: 512
      Timeout: 30
      Layers:
        - !Ref PackagePandas
    DependsOn:
      - FunctionStoreInferenceInputRole
      - PackagePandas

  FunctionGenerateInferenceInput:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-generate-inference-input"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Generates inference inputs
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-generate-inference-input-v3.zip
      Environment:
        Variables:
          STACK_ID: !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionGenerateInferenceInputRole.Arn
      Runtime: python3.10
      MemorySize: 128
      Timeout: 3
    DependsOn:
      - FunctionGenerateInferenceInputRole

  FunctionStoreInferenceResults:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-store-inference-results"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Store the results from the last inference call
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-store-inference-results-v3.zip
      Environment:
        Variables:
          STACK_ID: !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionStoreInferenceResultsRole.Arn
      Runtime: python3.10
      MemorySize: 128
      Timeout: 3
      Layers:
        - !Ref PackagePandas
    DependsOn:
      - FunctionStoreInferenceResultsRole
      - PackagePandas

  FunctionDescribeModel:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-describe-model"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Extract the L4E model parameters
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-describe-model-v2.zip
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionDescribeModelRole.Arn
      Runtime: python3.10
      MemorySize: 128
      Timeout: 3
    DependsOn:
      - FunctionDescribeModelRole

  FunctionTimestreamUnload:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-timestream-unload"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Unload a table from Timestream
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-timestream-unload-v2.zip
      Environment:
        Variables:
          STACK_ID: !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Layers:
        - !Ref PackagePandas
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionTimestreamRole.Arn
      Runtime: python3.10
      MemorySize: 256
      Timeout: 300
    DependsOn:
      - FunctionTimestreamRole

  FunctionParquet2CSV:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-parquet2csv"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Unload a table from Timestream
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-parquet2csv-v2.zip
      Layers:
        - arn:aws:lambda:eu-west-1:336392948345:layer:AWSSDKPandas-Python310:5
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionParquet2CSVRole.Arn
      Runtime: python3.10
      MemorySize: 2048
      Timeout: 300
    DependsOn:
      - FunctionParquet2CSVRole

  FunctionCsvFromS3:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-csv-from-s3"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: Copy a CSV file from an S3 location
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-csv-from-s3-v1.zip
      Environment:
        Variables:
          EXECUTION_ROLE: !GetAtt FunctionCSVFromS3Role.Arn
          ORIGIN:
            Fn::If:
            - WithCloudFront
            - !Sub https://${CloudFrontDistribution.DomainName}
            - !Sub https://${FrontendBucket.RegionalDomainName}/index.html
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionCSVFromS3Role.Arn
      Runtime: python3.10
      MemorySize: 128
      Timeout: 60
    DependsOn:
      - FunctionCSVFromS3Role
      - CloudFrontDistribution
      - FrontendBucket

  FunctionListBuckets:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-list-buckets"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: List all the buckets visible from this account
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-list-buckets-v1.zip
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionListBucketsRole.Arn
      Runtime: python3.10
      MemorySize: 128
      Timeout: 10
    DependsOn:
      - FunctionListBucketsRole

  FunctionListObjects:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - "-"
        - - "l4e-demo-app-list-objects"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: List all the objects visible from this account
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Functions
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - ''
          - - !FindInMap 
              - SourceCode
              - Functions
              - KeyPrefix
            - '/'
            - l4e-demo-app-list-objects-v1.zip
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FunctionListObjectsRole.Arn
      Runtime: python3.10
      MemorySize: 128
      Timeout: 60
    DependsOn:
      - FunctionListObjectsRole

  # -------------------------
  # LAMBDA LAYERS DEFINITIONS
  # -------------------------
  PackagePandas:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: 'pandas-py310'
      Content:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - Layers
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - Layers
              - KeyPrefix
            - pandas-py310.zip
      CompatibleRuntimes:
        - python3.10

  # -------------------------
  # API GATEWAY AND REST APIs
  # -------------------------
  AppBackendApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: "Lookout for Equipment web application API Gateway"
      EndpointConfiguration:
        Types:
          - EDGE
      Name: !Join
        - "-"
        - - "l4e-demo-app-backend-api"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"

  AppBackendApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: "default"
      RestApiId: !Ref AppBackendApiGateway
      DeploymentId: !Ref AppBackendApiGatewayDeployment
    DependsOn:
    - AppBackendApiGatewayDeployment

  AppBackendApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref AppBackendApiGateway
    DependsOn:
    - CsvFromS3PostMethod
    - CsvFromS3OptionsMethod
    - ListObjectsPostMethod
    - ListObjectsOptionsMethod
    - ListBucketsPostMethod
    - ListBucketsOptionsMethod

  CreateProjectResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt AppBackendApiGateway.RootResourceId
      RestApiId: !Ref AppBackendApiGateway
      PathPart: create-project

  CsvFromS3Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CreateProjectResource.ResourceId
      RestApiId: !Ref AppBackendApiGateway
      PathPart: csv-from-s3

  ListObjectsResource:
      Type: "AWS::ApiGateway::Resource"
      Properties:
        RestApiId: !Ref AppBackendApiGateway
        PathPart: list-objects
        ParentId: !GetAtt AppBackendApiGateway.RootResourceId

  ListBucketsResource:
      Type: "AWS::ApiGateway::Resource"
      Properties:
        RestApiId: !Ref AppBackendApiGateway
        PathPart: list-buckets
        ParentId: !GetAtt AppBackendApiGateway.RootResourceId

  CsvFromS3PostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AppBackendApiGateway
      ResourceId: !GetAtt CsvFromS3Resource.ResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        CacheNamespace: !Ref CsvFromS3Resource
        Type: AWS
        IntegrationHttpMethod: POST
        TimeoutInMillis: 29000
        PassthroughBehavior: WHEN_NO_MATCH
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionCsvFromS3.Arn}/invocations
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
    DependsOn:
    - FunctionCsvFromS3

  CsvFromS3OptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref AppBackendApiGateway
      ResourceId: !GetAtt CsvFromS3Resource.ResourceId
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      MethodResponses: 
        - StatusCode: "200"
          ResponseModels: 
              application/json: "Empty"
          ResponseParameters: 
              method.response.header.Access-Control-Allow-Headers: false
              method.response.header.Access-Control-Allow-Methods: false
              method.response.header.Access-Control-Allow-Origin: false
      Integration: 
        CacheNamespace: !Ref ListObjectsResource
        IntegrationResponses: 
          - StatusCode: "200"
            ResponseParameters: 
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates: 
          "application/json": "{\"statusCode\": 200}"
        TimeoutInMillis: 29000
        Type: "MOCK"

  ListObjectsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AppBackendApiGateway
      ResourceId: !GetAtt ListObjectsResource.ResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses: 
        - StatusCode: "200"
          ResponseModels: 
              application/json: "Empty"
          ResponseParameters: 
            method.response.header.Access-Control-Allow-Origin: false
      Integration: 
        CacheNamespace: !Ref ListObjectsResource
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_MATCH"
        TimeoutInMillis: 29000
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionListObjects.Arn}/invocations"
        IntegrationResponses: 
          - StatusCode: "200"
            ResponseParameters: 
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
    DependsOn:
    - FunctionListObjects

  ListObjectsOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref AppBackendApiGateway
      ResourceId: !GetAtt ListObjectsResource.ResourceId
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      MethodResponses: 
        - StatusCode: "200"
          ResponseModels: 
              application/json: "Empty"
          ResponseParameters: 
              method.response.header.Access-Control-Allow-Headers: false
              method.response.header.Access-Control-Allow-Methods: false
              method.response.header.Access-Control-Allow-Origin: false
      Integration: 
        CacheNamespace: !Ref ListObjectsResource
        IntegrationResponses: 
          - StatusCode: "200"
            ResponseParameters: 
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates: 
          "application/json": "{\"statusCode\": 200}"
        TimeoutInMillis: 29000
        Type: "MOCK"

  ListBucketsPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref AppBackendApiGateway
      ResourceId: !GetAtt ListBucketsResource.ResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      MethodResponses: 
        - StatusCode: "200"
          ResponseModels: 
            application/json: "Empty"
          ResponseParameters: 
            method.response.header.Access-Control-Allow-Origin: false
      Integration: 
          CacheNamespace: !Ref ListBucketsResource
          IntegrationHttpMethod: "POST"
          IntegrationResponses: 
            - StatusCode: "200"
              ResponseParameters: 
                method.response.header.Access-Control-Allow-Origin: "'*'"
              ResponseTemplates: {}
          PassthroughBehavior: "WHEN_NO_MATCH"
          TimeoutInMillis: 29000
          Type: "AWS"
          Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionListBuckets.Arn}/invocations"
    DependsOn:
    - FunctionListBuckets

  ListBucketsOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref AppBackendApiGateway
      ResourceId: !GetAtt ListBucketsResource.ResourceId
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      MethodResponses: 
        - StatusCode: "200"
          ResponseModels: 
              application/json: "Empty"
          ResponseParameters: 
              method.response.header.Access-Control-Allow-Headers: false
              method.response.header.Access-Control-Allow-Methods: false
              method.response.header.Access-Control-Allow-Origin: false
      Integration: 
        CacheNamespace: !Ref ListObjectsResource
        IntegrationResponses: 
          - StatusCode: "200"
            ResponseParameters: 
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates: 
          "application/json": "{\"statusCode\": 200}"
        TimeoutInMillis: 29000
        Type: "MOCK"

  ApiGatewayInvokeCsvFromS3Permission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FunctionCsvFromS3.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${AppBackendApiGateway}/*/*/*"
    DependsOn:
    - AppBackendApiGateway
    - FunctionCsvFromS3

  ApiGatewayInvokeListObjectsPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FunctionListObjects.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${AppBackendApiGateway}/*/*/*"
    DependsOn:
    - AppBackendApiGateway
    - FunctionListObjects

  ApiGatewayInvokeListBucketsPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FunctionListBuckets.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${AppBackendApiGateway}/*/*/*"
    DependsOn:
    - AppBackendApiGateway
    - FunctionListBuckets

  # -----------------------------
  # STEP FUNCTIONS AND ASSOCIATED
  # LOG GROUPS DEFINITIONS
  # -----------------------------
  DatasetPreparationStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join
        - "-"
        - - "l4e-demo-app-datasets-preparation"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      DefinitionS3Location:
        Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - StateMachines
              - S3Bucket
            - !Ref 'AWS::Region'
        Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - StateMachines
              - KeyPrefix
            - 'datasets-preparation-v2.json'
      DefinitionSubstitutions:
        function-new-project-entry: !GetAtt FunctionNewProjectEntry.Arn
        function-prepare-hourly-data: !GetAtt FunctionPrepareHourlyData.Arn
        function-ingest-model-results: !GetAtt FunctionIngestModelResults.Arn
        l4e-demo-app-version: 1.1.0
        role-step-function-dataset-preparation: !GetAtt StepFunctionRole.Arn
      RoleArn: !GetAtt StepFunctionRole.Arn
      LoggingConfiguration:
        Destinations: 
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt DatasetPreparationStateMachineLogGroup.Arn
        IncludeExecutionData: True
        Level: ALL
    DependsOn:
      - StepFunctionRole
      - FunctionNewProjectEntry
      - FunctionPrepareHourlyData
      - FunctionIngestModelResults
      - DatasetPreparationStateMachineLogGroup

  TimestreamExportStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join
        - "-"
        - - "l4e-demo-app-timestream-export"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      DefinitionS3Location:
        Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - StateMachines
              - S3Bucket
            - !Ref 'AWS::Region'
        Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - StateMachines
              - KeyPrefix
            - 'timestream-export-v1.json'
      DefinitionSubstitutions:
        function-timestream-unload: !GetAtt FunctionTimestreamUnload.Arn
        function-parquet2csv: !GetAtt FunctionParquet2CSV.Arn
      RoleArn: !GetAtt StepFunctionRole.Arn
      LoggingConfiguration:
        Destinations: 
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt TimestreamExportStateMachineLogGroup.Arn
        IncludeExecutionData: True
        Level: ALL
    DependsOn:
      - StepFunctionRole
      - FunctionTimestreamUnload
      - FunctionParquet2CSV
      - TimestreamExportStateMachineLogGroup

  ModelResultsExtractionStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join
        - "-"
        - - "l4e-demo-app-model-results-extraction"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      DefinitionS3Location:
        Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - StateMachines
              - S3Bucket
            - !Ref 'AWS::Region'
        Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - StateMachines
              - KeyPrefix
            - 'model-results-extraction-v1.json'
      DefinitionSubstitutions:
        function-describe-model: !GetAtt FunctionDescribeModel.Arn
        function-training-results-extraction: !GetAtt FunctionTrainingResultsExtraction.Arn
        function-ingest-model-results: !GetAtt FunctionIngestModelResults.Arn
      RoleArn: !GetAtt StepFunctionRole.Arn
      LoggingConfiguration:
        Destinations: 
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt ModelResultsExtractionStateMachineLogGroup.Arn
        IncludeExecutionData: True
        Level: ALL
    DependsOn:
      - StepFunctionRole
      - FunctionDescribeModel
      - FunctionTrainingResultsExtraction
      - FunctionIngestModelResults
      - ModelResultsExtractionStateMachineLogGroup

  DeployModelStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join
        - "-"
        - - "l4e-demo-app-model-deploy-model"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      DefinitionS3Location:
        Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - StateMachines
              - S3Bucket
            - !Ref 'AWS::Region'
        Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - StateMachines
              - KeyPrefix
            - 'deploy-model-v1.json'
      DefinitionSubstitutions:
        function-prepare-replay-data: !GetAtt FunctionPrepareReplayData.Arn
        function-generate-inference-input: !GetAtt FunctionGenerateInferenceInput.Arn
        l4e-demo-app-version: 1.1.0
        role-step-function-deploy-model: !GetAtt StepFunctionRole.Arn
      RoleArn: !GetAtt StepFunctionRole.Arn
      LoggingConfiguration:
        Destinations: 
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt DeployModelStateMachineLogGroup.Arn
        IncludeExecutionData: True
        Level: ALL
    DependsOn:
      - StepFunctionRole
      - FunctionPrepareReplayData
      - FunctionGenerateInferenceInput
      - DeployModelStateMachineLogGroup

  DatasetPreparationStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - "-"
        - - "/aws/vendedlogs/states/DatasetPreparationLogGroup"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      RetentionInDays: 14

  TimestreamExportStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - "-"
        - - "/aws/vendedlogs/states/TimestreamExportLogGroup"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      RetentionInDays: 14

  ModelResultsExtractionStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - "-"
        - - "/aws/vendedlogs/states/ModelResultsExtractionLogGroup"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      RetentionInDays: 14

  DeployModelStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - "-"
        - - "/aws/vendedlogs/states/DeployModelLogGroup"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      RetentionInDays: 14

  # ---------
  # IAM ROLES
  # ---------
  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRoleWithWebIdentity
          Condition:
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
            StringEquals:
              cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
      Policies:
      # The authenticated users needs the following permissions to interact with 
      # all the Lookout for Equipment resources where this app is deployed:
      - PolicyName: !Join
        - "_"
        - - LookoutEquipmentPermissions
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - lookoutequipment:DescribeDataset
            - lookoutequipment:ListDatasets
            - lookoutequipment:ListDataIngestionJobs
            - lookoutequipment:DeleteDataset
            - lookoutequipment:ListSensorStatistics
            - lookoutequipment:CreateModel
            - lookoutequipment:ListModels
            - lookoutequipment:DescribeModel
            - lookoutequipment:DeleteModel
            - lookoutequipment:ListInferenceSchedulers
            - lookoutequipment:StopInferenceScheduler
            - lookoutequipment:StartInferenceScheduler
            - lookoutequipment:DeleteInferenceScheduler
            - lookoutequipment:ListInferenceExecutions
            - lookoutequipment:DescribeInferenceScheduler
            - lookoutequipment:CreateLabelGroup
            - lookoutequipment:CreateLabel
            - lookoutequipment:TagResource
            - lookoutequipment:ListLabelGroups
            - lookoutequipment:ListLabels
            - lookoutequipment:DeleteLabelGroup
            - lookoutequipment:DeleteLabel
            Effect: Allow
            Resource: '*'
      # The authenticated user needs the following permissions to interact with
      # the DynamoDB tables operated by this application:
      - PolicyName: !Join
        - "_"
        - - DynamoDBPermissions
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - dynamodb:DescribeTable
            - dynamodb:DeleteTable
            - dynamodb:DeleteItem
            - dynamodb:PutItem
            - dynamodb:Query
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':dynamodb:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':table/l4edemoapp-*'
          - Action:
            - dynamodb:ListTables
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':dynamodb:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':table/*'
      # The authenticated user needs the following permissions to interact with
      # Timestream when extracting data from this service to create a new project:
      - PolicyName: !Join
        - "_"
        - - TimestreamPermissions
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - timestream:DescribeTable
            - timestream:ListDatabases
            - timestream:ListMeasures
            - timestream:ListTables
            - timestream:Select
            Effect: Allow
            Resource: '*'
      # The authenticated users must be able to run the backend Step Functions:
      - PolicyName: !Join
        - "_"
        - - StepFunctionsPermissions
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - states:StartExecution
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':states:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':stateMachine:l4e-demo-app*'
          - Action:
            - states:DescribeExecution
            - states:GetExecutionHistory
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':states:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':execution:l4e-demo-app*'
      # The different S3 access (public, private and protected):
      - PolicyName: !Join
        - "_"
        - - Private_policy
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:PutObjectTagging
            Effect: Allow
            Resource: !Join
            - "/"
            - - !GetAtt ApplicationBucket.Arn
              - "private/${cognito-identity.amazonaws.com:sub}/*"
      - PolicyName: !Join
        - "_"
        - - Protected_policy
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            Effect: Allow
            Resource: !Join
            - "/"
            - - !GetAtt ApplicationBucket.Arn
              - "protected/${cognito-identity.amazonaws.com:sub}/*"
      - PolicyName: !Join
        - "_"
        - - Public_policy
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            Effect: Allow
            Resource: !Join
            - "/"
            - - !GetAtt ApplicationBucket.Arn
              - "public/*"
      - PolicyName: !Join
        - "_"
        - - read_policy
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Join
            - "/"
            - - !GetAtt ApplicationBucket.Arn
              - "protected/*"
          - Action: s3:ListBucket
            Condition:
              StringLike:
                s3:prefix:
                - public/
                - public/*
                - protected/
                - protected/*
                - private/${cognito-identity.amazonaws.com:sub}/
                - private/${cognito-identity.amazonaws.com:sub}/*
            Effect: Allow
            Resource: !GetAtt ApplicationBucket.Arn
      - PolicyName: !Join
        - "_"
        - - Uploads_policy
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - s3:PutObject
            Effect: Allow
            Resource: !Sub ${ApplicationBucket.Arn}/uploads/*

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - "-"
        - - StepFunctionsExecutionRole
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - states.amazonaws.com
            - lookoutequipment.amazonaws.com
      Policies:
        - PolicyName: !Join
          - "-"
          - - StepFunctionsPassRolePermissions
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - iam:PassRole
                  - iam:GetRole
                Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/StepFunctionsExecutionRole-*"
        - PolicyName: !Join
          - "-"
          - - StepFunctionsS3Permissions
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:HeadObject
                Effect: Allow
                Resource: 
                  - !GetAtt ApplicationBucket.Arn
                  - !Sub ${ApplicationBucket.Arn}/*
        - PolicyName: !Join
          - "-"
          - - StepFunctionsLookoutEquipmentPermissions
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - lookoutequipment:CreateInferenceScheduler
                  - lookoutequipment:CreateDataset
                  - lookoutequipment:StartDataIngestionJob
                  - lookoutequipment:TagResource
                Effect: Allow
                Resource: '*'
        - PolicyName: !Join
          - "-"
          - - StepFunctionsStartSFNPermissions
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - states:StartExecution
                  - states:DescribeExecution
                  - states:StopExecution
                Effect: Allow
                Resource: '*'
        - PolicyName: !Join
          - "-"
          - - StepFunctionsDynamoDBPermissions
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                - dynamodb:ImportTable
                - dynamodb:DescribeImport
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':dynamodb:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':table/l4edemoapp-*'
        - PolicyName: !Join
          - "-"
          - - StepFunctionsNestedExecutions
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Effect: Allow
                Resource: 
                - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
        - PolicyName: !Join
          - "-"
          - - StepFunctionsTimestreamPermissions
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                - timestream:Unload
                - timestream:Select
                Effect: Allow
                Resource: '*'
        - PolicyName: !Join
          - "-"
          - - StepFunctionsLambdaPermissions
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Action:
              - lambda:InvokeFunction
              Effect: Allow
              Resource: !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':lambda:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':function:l4e-demo-app*'
        - PolicyName: !Join
          - "-"
          - - StepFunctionsCloudWatchPermissions
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Action:
              - logs:CreateLogDelivery
              - logs:GetLogDelivery
              - logs:UpdateLogDelivery
              - logs:DeleteLogDelivery
              - logs:ListLogDeliveries
              - logs:PutResourcePolicy
              - logs:PutRetentionPolicy
              - logs:DescribeResourcePolicies
              - logs:DescribeLogGroups
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
              Effect: Allow
              Resource: '*'

  InitializeBucketRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      Policies:
        - PolicyName: InitializeBucketRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:PutObject'
                  - 's3:PutBucketNotification'
                Effect: Allow
                Resource: 
                  - !GetAtt ApplicationBucket.Arn
                  - !Sub ${ApplicationBucket.Arn}/*

  InitializeDynamoDBTablesRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        # - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      Policies:
        - PolicyName: UserTablesManagementPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteTable'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':dynamodb:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':table/l4edemoapp-*'
              - Action:
                  - 'dynamodb:ListTables'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':dynamodb:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':table/*'
              - Action:
                  - 'cognito-idp:AdminGetUser'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':cognito-idp:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':userpool/'
                    - !Ref CognitoUserPool

  FunctionNewProjectEntryRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        - !Ref DynamoDBAccessPolicy
        - !Ref S3AccessPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com

  FunctionPrepareHourlyDataRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        - !Ref DynamoDBAccessPolicy
        - !Ref S3AccessPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com

  FunctionIngestModelResultsRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        - !Ref DynamoDBAccessPolicy
        - !Ref S3AccessPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com

  FunctionPrepareReplayDataRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        - !Ref DynamoDBAccessPolicy
        - !Ref S3AccessPolicy
        - !Ref LookoutEquipmentPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com

  FunctionTrainingResultsExtractionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        - !Ref DynamoDBAccessPolicy
        - !Ref S3AccessPolicy
        - !Ref LookoutEquipmentPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com

  FunctionStoreInferenceInputRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        - !Ref DynamoDBAccessPolicy
        - !Ref S3AccessPolicy
        - !Ref LookoutEquipmentPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com

  FunctionGenerateInferenceInputRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        - !Ref S3AccessPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com

  FunctionStoreInferenceResultsRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        - !Ref DynamoDBAccessPolicy
        - !Ref S3AccessPolicy
        - !Ref LookoutEquipmentPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com

  FunctionDescribeModelRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        - !Ref LookoutEquipmentPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com

  FunctionTimestreamRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        - !Ref DynamoDBAccessPolicy
        - !Ref TimestreamAccessPolicy
        - !Ref S3AccessPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com

  FunctionParquet2CSVRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        - !Ref S3AccessPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com

  FunctionCSVFromS3Role:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      Policies:
        - PolicyName: !Join
          - "-"
          - - CSVFromS3AssumeRolePermissions
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                - sts:AssumeRole
                Effect: Allow
                Resource: "*"
        # Only allow access to roles this lambda function will create:
        - PolicyName: !Join
          - "-"
          - - CSVFromS3IAMRolePermissions
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                - iam:CreateRole
                - iam:PutRolePolicy
                - iam:DeleteRole
                - iam:GetRolePolicy
                - iam:DeleteRolePolicy
                Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/L4EDemoApp-CopyCSVFromS3-*"

  FunctionListBucketsRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        - !Ref S3AccessPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com

  FunctionListObjectsRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref LambdaExecutionPolicy
        - !Ref S3AccessPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com

  # ------------------------------------------------------
  # IAM FINE GRAINED POLICIES
  # These policies cover all the needs of the app and will
  # be attached to the different roles that have just been
  # defined.
  # ------------------------------------------------------

  # All roles linked to Lambda need this policy:
  LambdaExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:CreateLogGroup'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
          - Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':log-group:/aws/lambda/*'

  # This gives read access to Lookout for Equipment
  # datasets (projects) and models:
  LookoutEquipmentPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'lookoutequipment:DescribeModel'
              - 'lookoutequipment:DescribeDataset'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':lookoutequipment:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':dataset/l4e-demo-app*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':lookoutequipment:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':model/*'

  # This gives read and write access to the application bucket:
  S3AccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectTagging
              - s3:PutObjectTagging
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:ListBucket
              - s3:ListAllMyBuckets
              - s3:DeleteObject
              - s3:GetBucketAcl
            Effect: Allow
            Resource:
              - !GetAtt ApplicationBucket.Arn
              - !Sub ${ApplicationBucket.Arn}/*

  # This gives read and write access to the application DynamoDB tables:
  DynamoDBAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
            - 'dynamodb:ListTables'
            - 'dynamodb:DescribeTable'
            - 'dynamodb:PutItem'
            - 'dynamodb:BatchWriteItem'
            - 'dynamodb:CreateTable'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':dynamodb:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':table/l4edemoapp-*'

  # This gives ability to run Unload on a Timestream table:
  TimestreamAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
            - timestream:Unload
            - timestream:Select
            - timestream:DescribeEndpoints
            Effect: Allow
            Resource: '*'

# ================
# OUTPUTS
# ================
Outputs:
  ApplicationUrl:
    Value:
      Fn::If:
      - WithCloudFront
      - !Sub https://${CloudFrontDistribution.DomainName}
      - !Sub https://${FrontendBucket.RegionalDomainName}/index.html
    Description: URL for the Amazon Lookout for Equipment Demo app
  ApplicationBucket:
    Value: !Ref ApplicationBucket
    Description: User data will be stored here. ***Note that this bucket will be retained should you delete this stack.***
  FrontendBucket:
    Value: !Ref FrontendBucket
    Description: The application frontend is stored in this bucket.
  UserPool:
    Value: !Ref CognitoUserPool
    Description: You can use the Cognito console to manually add user to the app (useful if you prevent in-app sign up)